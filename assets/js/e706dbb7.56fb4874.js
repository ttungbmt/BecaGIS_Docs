"use strict";(self.webpackChunkbeca_gis_docs=self.webpackChunkbeca_gis_docs||[]).push([[955],{4137:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(g,l(l({ref:t},u),{},{components:r})):n.createElement(g,l({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8703:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(4137)),l=["components"],c={title:"PostgreSQL"},i=void 0,s={unversionedId:"database/postgresql",id:"database/postgresql",title:"PostgreSQL",description:"Adds a geometry column",source:"@site/docs/database/postgresql.md",sourceDirName:"database",slug:"/database/postgresql",permalink:"/BecaGIS_Docs/docs/database/postgresql",editUrl:"https://github.com/ttungbmt/BecaGIS_Docs/tree/master/docs/database/postgresql.md",tags:[],version:"current",frontMatter:{title:"PostgreSQL"}},u=[{value:"Adds a geometry column",id:"adds-a-geometry-column",children:[],level:3},{value:"Spatial Indexing",id:"spatial-indexing",children:[],level:3},{value:"Fulltext Search",id:"fulltext-search",children:[],level:3},{value:"Natural sort",id:"natural-sort",children:[],level:3}],p={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"adds-a-geometry-column"},"Adds a geometry column"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT AddGeometryColumn ('public', 'my_table', 'geom', 4326, 'POINT', 2);\n")),(0,o.kt)("h3",{id:"spatial-indexing"},"Spatial Indexing"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE INDEX my_table_geom_idx ON my_table USING GIST (geom);\n\nDROP INDEX my_table_geom_idx;\n")),(0,o.kt)("h3",{id:"fulltext-search"},"Fulltext Search"),(0,o.kt)("h3",{id:"natural-sort"},"Natural sort"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create or replace function natural_sort(text)\n    returns bytea language sql immutable strict as $f$\n    select string_agg(convert_to(coalesce(r[2], length(length(r[1])::text) || length(r[1])::text || r[1]), 'SQL_ASCII'),'\\x00')\n    from regexp_matches($1, '0*([0-9]+)|([^0-9]+)', 'g') r;\n$f$;\n")))}d.isMDXComponent=!0}}]);